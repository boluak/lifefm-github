/* Rounded block */

  v\:* { behavior: url(#default#VML); display: block; }
  
  .b-round {
    position: relative;
    display: block;
  }
  
  .b-round {
    zoom: expression(
      runtimeStyle.zoom="1", /* one-time called expression, at the same time declare hasLayout */
 
      this.ROUNDfix = function(obj){

        var color = obj.currentStyle.backgroundColor ? obj.currentStyle.backgroundColor : "white";
 
        try{
          /* Подготавливаем ноду и ставим ей атрибуты */
          var round = document.createElement("v:roundrect");
          round.fillColor = color;
          
          if(obj.currentStyle.borderWidth == "1px")
            round.strokecolor = obj.currentStyle.borderColor ? obj.currentStyle.borderColor : color
          else
            round.strokecolor = color;
 
          if(!document.onReady)
            document.onReady = [];

          if(document.ieReady)
            obj.ROUNDcreate(obj, round, color);
          else
            document.onReady.push(function(){
              obj.ROUNDcreate(obj, round, color);
            })
          
        }catch(e){
          obj.runtimeStyle.backgroundColor = color;
        }
      },
      this.ROUNDcreate = function(obj, round, color){

        round.arcSize = obj.offsetWidth < obj.offsetHeight ? parseInt(obj.currentStyle.IEBorderRadius) / obj.offsetWidth : parseInt(obj.currentStyle.IEBorderRadius) / obj.offsetHeight;
        obj.insertBefore(round, obj.firstChild);
        obj.runtimeStyle.backgroundColor = "transparent";
        obj.runtimeStyle.border = "none";
 
        window.attachEvent("onresize", function(){
          obj.runtimeStyle.backgroundColor = color;
          var _round = obj.removeChild(round);
          var _arcSize = obj.currentStyle.IEBorderRadius;
          if(_arcSize){
            _arcSize = parseInt(_arcSize)
            _round.arcSize = obj.offsetWidth < obj.offsetHeight ? Math.round(_arcSize / obj.offsetWidth * 1000)/1000 : Math.round(_arcSize / obj.offsetHeight * 1000)/1000;
          }
          obj.insertBefore(_round, obj.firstChild);
          obj.runtimeStyle.backgroundColor = "transparent";
        })
 
      },
 
      this.ROUNDfix(this)
    );
  }
 
  .b-round v\:roundrect {
    z-index: -1;
    position: absolute;
    left: 0; top: 0;
    width: 100%;
    height: 100%;
    -height: expression(parentNode.offsetHeight-1 + 'px');
  }
  
/* Rounded block (end) */